# Workflow optimizado para 800 RPD con memoria persistente
name: üéØ Bot Prosperidad Divina - 800 RPD Optimizado

# Configuraci√≥n para 800 RPD
on:
  # Cada 30 minutos para lograr 800 RPD
  schedule:
    - cron: '0,30 * * * *'  # 48 ejecuciones/d√≠a √ó 17 comentarios = 816 RPD
  
  # Ejecuci√≥n manual
  workflow_dispatch:

# Permisos necesarios
permissions:
  contents: write
  actions: read

jobs:
  bendecir-comentarios-800rpd:
    runs-on: ubuntu-latest
    
    steps:
    # Paso 1: Descargar repositorio y memoria
    - name: üì• Descargar repositorio y memoria existente
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    # Paso 2: Configurar Python
    - name: üêç Configurar Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    # Paso 3: Instalar dependencias
    - name: üì¶ Instalar librer√≠as necesarias
      run: |
        pip install google-generativeai google-auth google-auth-oauthlib google-api-python-client python-dateutil
        
    # Paso 4: Verificar memoria existente
    - name: üîç Verificar estado de archivos de memoria
      run: |
        echo "üìÇ ESTADO ACTUAL - CONFIGURACI√ìN 800 RPD:"
        ls -la
        echo ""
        
        if [ -f "comentarios_respondidos.txt" ]; then
          LINEAS=$(wc -l < comentarios_respondidos.txt)
          echo "‚úÖ Comentarios respondidos: $LINEAS"
          echo "   - √öltimas 3 l√≠neas:"
          tail -3 comentarios_respondidos.txt | sed 's/^/     /'
        else
          echo "‚ö†Ô∏è  comentarios_respondidos.txt no existe (se crear√°)"
        fi
        
        if [ -f "memoria_conversaciones.json" ]; then
          USUARIOS=$(grep -c '"autor_id"' memoria_conversaciones.json 2>/dev/null || echo "0")
          echo "‚úÖ Memoria conversaciones:"
          echo "   - Tama√±o: $(du -h memoria_conversaciones.json | cut -f1)"
          echo "   - Usuarios: $USUARIOS"
        else
          echo "‚ö†Ô∏è  memoria_conversaciones.json no existe (se crear√°)"
        fi
        
        echo ""
        echo "üéØ CONFIGURACI√ìN 800 RPD:"
        echo "   - Ejecuci√≥n: Cada 30 minutos (48/d√≠a)"
        echo "   - Comentarios por ejecuci√≥n: 17"
        echo "   - RPD objetivo: 816"
        echo "   - Modelo: Gemini 2.5 Flash-Lite (1,000 RPD)"

    # Paso 5: Ejecutar bot 800 RPD
    - name: üéØ Ejecutar Bot 800 RPD Optimizado
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        YOUTUBE_CREDENTIALS_COMMENTS: ${{ secrets.YOUTUBE_CREDENTIALS_COMMENTS }}
      run: |
        echo "üöÄ INICIANDO BOT 800 RPD..."
        echo "‚è∞ Inicio: $(date +'%Y-%m-%d %H:%M:%S UTC')"
        echo "üéØ Objetivo esta ejecuci√≥n: 17 comentarios"
        echo ""
        
        python bot_prosperidad_divina.py
        
        echo ""
        echo "‚úÖ Ejecuci√≥n 800 RPD completada"
        echo "‚è∞ Fin: $(date +'%Y-%m-%d %H:%M:%S UTC')"

    # Paso 6: Verificar resultados 800 RPD
    - name: üîç Verificar resultados 800 RPD
      run: |
        echo "üìä RESULTADOS DE ESTA EJECUCI√ìN 800 RPD:"
        echo ""
        
        if [ -f "comentarios_respondidos.txt" ]; then
          LINEAS_NUEVAS=$(wc -l < comentarios_respondidos.txt)
          echo "‚úÖ comentarios_respondidos.txt:"
          echo "   - Total l√≠neas: $LINEAS_NUEVAS"
          if [ "$LINEAS_NUEVAS" -gt 0 ]; then
            echo "   - √öltimas 5 respuestas:"
            tail -5 comentarios_respondidos.txt | sed 's/^/     /'
          fi
        fi
        
        if [ -f "memoria_conversaciones.json" ]; then
          USUARIOS=$(grep -c '"autor_id"' memoria_conversaciones.json 2>/dev/null || echo "0")
          echo "‚úÖ memoria_conversaciones.json:"
          echo "   - Tama√±o: $(du -h memoria_conversaciones.json | cut -f1)"
          echo "   - Usuarios en memoria: $USUARIOS"
        fi
        
        echo ""
        echo "üìã Reportes generados:"
        REPORTES_800RPD=$(ls -la reporte_*.json 2>/dev/null | wc -l)
        if [ "$REPORTES_800RPD" -gt 0 ]; then
          ls -la reporte_*.json | tail -1
          echo "   üìà Total reportes: $REPORTES_800RPD"
          
          # Extraer estad√≠sticas del √∫ltimo reporte
          ULTIMO_REPORTE=$(ls -t reporte_*.json 2>/dev/null | head -1)
          if [ -f "$ULTIMO_REPORTE" ]; then
            RESPUESTAS=$(grep '"respuestas_exitosas"' "$ULTIMO_REPORTE" | grep -o '[0-9]*' | tail -1)
            PROCESADOS=$(grep '"comentarios_procesados"' "$ULTIMO_REPORTE" | grep -o '[0-9]*' | tail -1)
            echo "   üìä Esta ejecuci√≥n: $RESPUESTAS respuestas de $PROCESADOS procesados"
          fi
        else
          echo "   (No se generaron reportes en esta ejecuci√≥n)"
        fi
        
        echo ""
        echo "üîÑ Cambios pendientes en Git:"
        git status --porcelain

    # Paso 7: Guardar memoria y proyectar 800 RPD
    - name: üíæ Guardar memoria y calcular proyecci√≥n 800 RPD
      run: |
        # Configurar Git
        git config --local user.email "action@github.com"
        git config --local user.name "Bot Prosperidad Divina 800RPD"
        
        # Sincronizaci√≥n con repositorio remoto
        echo "üîÑ Sincronizando repositorio..."
        git pull --rebase origin main || {
          echo "‚ö†Ô∏è  Rebase fall√≥, intentando merge..."
          git pull --no-rebase origin main || echo "‚ö†Ô∏è  Continuando sin pull..."
        }
        
        # A√±adir archivos importantes
        git add comentarios_respondidos.txt memoria_conversaciones.json reporte_*.json
        
        # Verificar cambios
        if ! git diff --staged --quiet; then
          # Calcular estad√≠sticas para 800 RPD
          FECHA=$(date +'%d/%m/%Y %H:%M UTC')
          COMENTARIOS_TOTAL=$(wc -l < comentarios_respondidos.txt 2>/dev/null || echo "0")
          
          if [ -f "memoria_conversaciones.json" ]; then
            USUARIOS_MEMORIA=$(grep -c '"autor_id"' memoria_conversaciones.json 2>/dev/null || echo "0")
          else
            USUARIOS_MEMORIA="0"
          fi
          
          # Extraer estad√≠sticas del √∫ltimo reporte
          ULTIMO_REPORTE=$(ls -t reporte_*.json 2>/dev/null | head -1)
          if [ -f "$ULTIMO_REPORTE" ]; then
            RESPUESTAS_ESTA_EJECUCION=$(grep '"respuestas_exitosas"' "$ULTIMO_REPORTE" | grep -o '[0-9]*' | tail -1)
            GEMINI_EXITOSAS=$(grep '"respuestas_ia_exitosas"' "$ULTIMO_REPORTE" | grep -o '[0-9]*' | tail -1)
            DURACION=$(grep '"duracion_minutos"' "$ULTIMO_REPORTE" | grep -o '[0-9.]*' | tail -1)
          else
            RESPUESTAS_ESTA_EJECUCION="0"
            GEMINI_EXITOSAS="0"
            DURACION="0"
          fi
          
          # Proyecci√≥n diaria para 800 RPD
          if [ "$RESPUESTAS_ESTA_EJECUCION" -gt 0 ]; then
            PROYECCION_DIARIA=$((RESPUESTAS_ESTA_EJECUCION * 48))
            PORCENTAJE_800=$((PROYECCION_DIARIA * 100 / 800))
          else
            PROYECCION_DIARIA="0"
            PORCENTAJE_800="0"
          fi
          
          # Commit con informaci√≥n detallada para 800 RPD
          git commit -m "üéØ 800RPD Update - $FECHA | üìä Total: $COMENTARIOS_TOTAL | üë• Users: $USUARIOS_MEMORIA | ‚ú® Esta exec: $RESPUESTAS_ESTA_EJECUCION | ü§ñ Gemini: $GEMINI_EXITOSAS | üìà Proyecci√≥n: ${PROYECCION_DIARIA}RPD (${PORCENTAJE_800}%)"
          
          # Push con m√∫ltiples intentos
          echo "üì§ Guardando cambios..."
          PUSH_SUCCESS=false
          
          if git push origin main; then
            PUSH_SUCCESS=true
          elif git pull --rebase origin main && git push origin main; then
            PUSH_SUCCESS=true
          elif git pull --no-rebase origin main && git push origin main; then
            PUSH_SUCCESS=true
          elif git push --force-with-lease origin main; then
            PUSH_SUCCESS=true
            echo "‚ö†Ô∏è  Usado force push - revisar manualmente"
          fi
          
          if [ "$PUSH_SUCCESS" = true ]; then
            echo "‚úÖ Memoria guardada exitosamente"
            echo ""
            echo "üìä ESTAD√çSTICAS 800 RPD:"
            echo "   - Total comentarios BD: $COMENTARIOS_TOTAL"
            echo "   - Usuarios en memoria: $USUARIOS_MEMORIA"
            echo "   - Esta ejecuci√≥n: $RESPUESTAS_ESTA_EJECUCION respuestas"
            echo "   - Gemini exitosas: $GEMINI_EXITOSAS"
            echo "   - Duraci√≥n: ${DURACION} minutos"
            echo "   - Proyecci√≥n diaria: ${PROYECCION_DIARIA} RPD"
            echo "   - Progreso hacia 800: ${PORCENTAJE_800}%"
          else
            echo "‚ùå ERROR: Push fall√≥ despu√©s de m√∫ltiples intentos"
            exit 1
          fi
          
        else
          echo "‚ÑπÔ∏è  Sin cambios en esta ejecuci√≥n"
          echo "üí° Posibles razones:"
          echo "   ‚Ä¢ No hab√≠a comentarios nuevos disponibles"
          echo "   ‚Ä¢ Todos los comentarios recientes ya fueron procesados"
          echo "   ‚Ä¢ Comentarios filtrados por criterios de validaci√≥n"
        fi

    # Paso 8: Limpieza inteligente para 800 RPD
    - name: üßπ Limpieza optimizada para 800 RPD
      run: |
        echo "üóÇÔ∏è  Gesti√≥n de reportes (800 RPD genera ~48 reportes/d√≠a)..."
        REPORTES_COUNT=$(ls reporte_*.json 2>/dev/null | wc -l)
        
        # Para 800 RPD, mantener reportes de √∫ltimos 2 d√≠as (96 reportes)
        if [ "$REPORTES_COUNT" -gt 96 ]; then
          echo "   üìä Reportes actuales: $REPORTES_COUNT"
          echo "   üßπ Manteniendo √∫ltimos 96 reportes (2 d√≠as de 800 RPD)"
          
          # Eliminar reportes m√°s antiguos
          ls -t reporte_*.json | tail -n +97 | xargs rm -f
          
          # Commitear limpieza si hay cambios
          git add . 
          if ! git diff --staged --quiet; then
            ELIMINADOS=$((REPORTES_COUNT - 96))
            git commit -m "üßπ Limpieza 800RPD: $ELIMINADOS reportes antiguos eliminados (mantenidos 96)"
            
            if git push origin main || git push --force-with-lease origin main; then
              echo "   ‚úÖ $ELIMINADOS reportes eliminados y guardado"
            else
              echo "   ‚ö†Ô∏è  Limpieza OK, push fall√≥ (no cr√≠tico)"
            fi
          fi
        else
          echo "   ‚úÖ $REPORTES_COUNT reportes, no requiere limpieza"
        fi

    # Paso 9: Mensaje de √©xito 800 RPD
    - name: üéâ Confirmaci√≥n final 800 RPD
      if: success()
      run: |
        echo ""
        echo "üéØ ¬°EJECUCI√ìN 800 RPD COMPLETADA EXITOSAMENTE! üéØ"
        echo ""
        echo "üìä CONFIGURACI√ìN ACTIVA:"
        echo "   ü§ñ Modelo: Gemini 2.5 Flash-Lite"
        echo "   ‚è∞ Frecuencia: Cada 30 minutos (48 ejecuciones/d√≠a)"
        echo "   üìù Comentarios/ejecuci√≥n: 17"
        echo "   üéØ Objetivo diario: 800 RPD"
        echo "   üìà Proyecci√≥n real: 816 RPD"
        echo "   üõ°Ô∏è  Margen de seguridad: 184 RPD disponibles"
        echo ""
        echo "üîÑ PR√ìXIMA EJECUCI√ìN: En 30 minutos"
        echo "üíæ Memoria persistente mantenida entre ejecuciones"
        echo "üìä Reportes detallados generados autom√°ticamente"
        echo "‚ú® Las bendiciones fluyen de manera optimizada"
        echo ""
        
    # Paso 10: Manejo de errores para 800 RPD
    - name: üö® Manejo de errores 800 RPD
      if: failure()
      run: |
        echo ""
        echo "‚ùå ERROR EN EJECUCI√ìN 800 RPD"
        echo ""
        echo "üîç Diagn√≥stico para configuraci√≥n 800 RPD:"
        echo "   ‚Ä¢ Error en APIs (YouTube/Gemini Flash-Lite)"
        echo "   ‚Ä¢ L√≠mites de cuota 1,000 RPD excedidos (improbable)"
        echo "   ‚Ä¢ Conectividad intermitente"
        echo "   ‚Ä¢ Insuficientes comentarios nuevos disponibles"
        echo "   ‚Ä¢ Conflictos Git (manejo autom√°tico implementado)"
        echo ""
        echo "üîÑ RECUPERACI√ìN AUTOM√ÅTICA:"
        echo "   ‚Ä¢ Pr√≥ximo intento en 30 minutos"
        echo "   ‚Ä¢ Memoria existente preservada"
        echo "   ‚Ä¢ Configuraci√≥n 800 RPD mantenida"
        echo "   ‚Ä¢ 47 oportunidades m√°s hoy para alcanzar objetivo"
        echo ""
